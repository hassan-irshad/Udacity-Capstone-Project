service:
  name: photos-catalogue-app

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true


provider:
  name: aws
  runtime: nodejs12.x
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    CATALOGUE_TABLE: Catalogue-${self:provider.stage}
    IMAGES_TABLE: Catalogue-Images-${self:provider.stage}
  
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

functions:
  CreateCatalogue:
    handler: src/lambda/http/createCatalogue.handler
    events:
      - http:
          method: post
          path: createCatalogue
          cors: true
    iamRoleStatementsName: ${self:service.name}-createCatalogue-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATALOGUE_TABLE}

  GetCatalogues:
    handler: src/lambda/http/getCatalogues.handler
    events:
      - http:
          method: get
          path: getCatalogues
          cors: true
    iamRoleStatementsName: ${self:service.name}-getCatalogue-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATALOGUE_TABLE}

  DeleteCatalogue:
    handler: src/lambda/http/deleteCatalogue.handler
    events: 
      - http:
          method: delete
          path: DeleteCatalogue
          cors: true
    iamRoleStatementsName: ${self:service.name}-deleteCatalogue-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem 
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CATALOGUE_TABLE}

  CreateImage:
    handler: src/lambda/http/createImage.handler
    events:
      - http:
          method: post
          path: createImage
          cors: true
    iamRoleStatementsName: ${self:service.name}-createCatalogueImage-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}
        
resources:
  Resources:
    CatalogueDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: catalogueId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: catalogueId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CATALOGUE_TABLE}
    
    CatalogueImagesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: imageId
            AttributeType: S
          - AttributeName: catalogueId
            AttributeType: S
        KeySchema:
          - AttributeName: catalogueId
            KeyType: HASH
          - AttributeName: imageId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.IMAGES_TABLE}

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
